# OpenApi header is included in this file to support code highlighting in VSCode
openapi: 3.0.3
info:
  title: Monitors API
  version: "1.0.0"
paths:
  /monitors:
    get:
      tags:
        - monitor
      summary: "List monitors"
      description: "List all available monitor in the system"
      operationId: getAllMonitors
      responses:
        "200":
          $ref: "#/components/responses/monitors"
        "500":
          $ref: "#/components/responses/monitorApiError"

  /monitors/{monitorIdOrUrn}:
    get:
      tags:
        - monitor
      summary: "Get a monitor"
      description: "Returns a monitor full representation"
      operationId: getMonitor
      parameters:
        - $ref: "#/components/parameters/monitorIdOrUrn"
      responses:
        "200":
          $ref: "#/components/responses/monitor"
        "400":
          $ref: "#/components/responses/invalidMonitorIdentifierError"
        "404":
          $ref: "#/components/responses/monitorNotFoundError"
        "500":
          $ref: "#/components/responses/monitorApiError"

    patch:
      tags:
        - monitor
      parameters:
        - $ref: "#/components/parameters/monitorIdOrUrn"
      requestBody:
        $ref: "#/components/requestBodies/monitorPatch"
      summary: "Update some monitor properties"
      description: "Performs a patch on the monitor base properties."
      operationId: patchMonitor
      responses:
        "200":
          $ref: "#/components/responses/monitor"
        "400":
          $ref: "#/components/responses/monitorValidationError"
        "404":
          $ref: "#/components/responses/monitorNotFoundError"
        "500":
          $ref: "#/components/responses/monitorApiError"

    delete:
      tags:
        - monitor
      summary: "Delete a monitor"
      description: "Deletes existing monitor"
      operationId: deleteMonitor
      parameters:
        - $ref: "#/components/parameters/monitorIdOrUrn"
      responses:
        "204":
          description: "Return ok"
        "400":
          $ref: "#/components/responses/invalidMonitorIdentifierError"
        "404":
          $ref: "#/components/responses/monitorNotFoundError"
        "500":
          $ref: "#/components/responses/monitorApiError"

  /monitors/{monitorIdOrUrn}/run:
    post:
      tags:
        - monitor
      parameters:
        - $ref: "#/components/parameters/monitorIdOrUrn"
        - $ref: "#/components/parameters/dryRun"
      summary: "Run a monitor"
      description: "Performs a run of a monitor. If 'dryRun' is set, topology state will not be modified."
      operationId: runMonitor
      responses:
        "200":
          $ref: "#/components/responses/monitorRunResult"
        "400":
          $ref: "#/components/responses/invalidMonitorIdentifierError"
        "404":
          $ref: "#/components/responses/monitorNotFoundError"
        "500":
          $ref: "#/components/responses/monitorApiError"

  /monitors/{monitorIdOrUrn}/status:
    get:
      tags:
        - monitor
      summary: "Get a monitor with stream information"
      description: "Returns a monitor full representation with the stream status information"
      operationId: getMonitorWithStatus
      parameters:
        - $ref: "#/components/parameters/monitorIdOrUrn"
      responses:
        "200":
          $ref: "#/components/responses/monitorStatus"
        "400":
          $ref: "#/components/responses/invalidMonitorIdentifierError"
        "404":
          $ref: "#/components/responses/monitorNotFoundError"
        "500":
          $ref: "#/components/responses/monitorApiError"

  /monitors/overview:
    get:
      tags:
        - monitor
      summary: "List monitors overview"
      description: "List all available monitor in the system with their function and runtime data"
      operationId: getMonitorsOverview
      responses:
        "200":
          $ref: "#/components/responses/monitorsOverview"
        "500":
          $ref: "#/components/responses/monitorApiError"

components:
  parameters:
    monitorIdOrUrn:
      in: path
      name: monitorIdOrUrn
      required: true
      schema:
        $ref: "#/components/schemas/MonitorIdOrUrn"
      description: "The id or identifier (urn) of a monitor"

    dryRun:
      in: query
      name: dryRun
      schema:
        type: boolean
      description: "If set, the topology state will not be modified"
  responses:
    monitors:
      description: "List of all available monitors"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MonitorList"
    monitor:
      description: "Full representation of a monitor"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Monitor"
    monitorsOverview:
      description: "List of all available monitors with their function and runtime data"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MonitorOverviewList"
    monitorRunResult:
      description: "Full representation of the result of a monitor run"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MonitorRunResult"
    monitorStatus:
      description: "Full representation of a monitor with status"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MonitorStatus"
    invalidMonitorIdentifierError:
      description: "Invalid monitor id or identifier"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidMonitorIdentifierError"
    monitorNotFoundError:
      description: "monitor was not found in the database"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MonitorNotFoundError"
    monitorValidationError:
      description: "monitor request has errors"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MonitorValidationError"
    monitorApiError:
      description: "container for all error response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MonitorApiError"
  requestBodies:
    monitorPatch:
      description: "Monitor base properties"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MonitorPatch"

  schemas:
    MonitorIdOrUrn:
      type: string
      pattern: ^urn:.+|[0-9]+$

    MonitorId:
      type: integer
      format: int64

    MonitorUrn:
      type: string

    MonitorStatusValue:
      type: string
      enum:
        - ENABLED
        - DISABLED
      description: "If a monitor status is set to DISABLED it won't produce any health states but it can still be run manually to inspect it's output"

    MonitorRuntimeStatusValue:
      type: string
      enum:
        - ENABLED
        - DISABLED
        - ERROR
        - WARNING

    MonitorList:
      type: object
      properties:
        monitors:
          type: array
          items:
            $ref: "#/components/schemas/Monitor"
      required:
        - monitors

    MonitorOverviewList:
      type: object
      properties:
        monitors:
          type: array
          items:
            $ref: "#/components/schemas/MonitorOverview"
      required:
        - monitors

    Monitor:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MonitorId"
        name:
          type: string
        identifier:
          $ref: "#/components/schemas/MonitorUrn"
        description:
          type: string
        functionId:
          type: integer
          format: int64
        arguments:
          type: array
          items:
            type: object
        remediationHint:
          type: string
        intervalSeconds:
          type: integer
        tags:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/MonitorStatusValue"
        runtimeStatus:
          $ref: "#/components/schemas/MonitorRuntimeStatusValue"
        lastUpdateTimestamp:
          type: integer
          format: int64

      required:
        - id
        - name
        - functionId
        - arguments
        - intervalSeconds
        - tags
        - status
        - runtimeStatus
        - lastUpdateTimestamp

    MonitorFunction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        lastUpdateTimestamp:
          type: integer
          format: int64

      required:
        - id
        - name
        - lastUpdateTimestamp

    MonitorPatch:
      type: object
      properties:
        name:
          type: string
        identifier:
          $ref: "#/components/schemas/MonitorUrn"
        description:
          type: string
        remediationHint:
          type: string
        intervalSeconds:
          type: integer
        tags:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/MonitorStatusValue"

    MonitorValidationError:
      discriminator:
        propertyName: _type
      oneOf:
        - $ref: "#/components/schemas/MonitorInvalidIntervalError"
        - $ref: "#/components/schemas/InvalidMonitorIdentifierError"
      required:
        - _type

    MonitorRunResult:
      type: object
      properties:
        result:
          type: object
      required:
        - result

    MonitorOverview:
      type: object
      properties:
        monitor:
          $ref: "#/components/schemas/Monitor"
        function:
          $ref: "#/components/schemas/MonitorFunction"
        errors:
          $ref: "#/components/schemas/MonitorErrors"
        runtimeMetrics:
          $ref: "#/components/schemas/MonitorRuntimeMetrics"
      required:
        - monitor
        - function
        - runtimeMetrics

    MonitorStatus:
      type: object
      properties:
        monitor:
          $ref: "#/components/schemas/Monitor"
        function:
          $ref: "#/components/schemas/MonitorFunction"
        errors:
          $ref: "#/components/schemas/MonitorErrors"
        metrics:
          $ref: "#/components/schemas/MonitorMetrics"
        topologyMatchResult:
          $ref: "health_sync_service_api.yaml#/components/schemas/TopologyMatchResult"
      required:
        - monitor
        - function
        - metrics

    BaseMonitorError:
      type: object
      properties:
        monitorId:
          type: string
        monitorIdType:
          type: string
          enum:
            - id
            - urn
    InvalidMonitorIdentifierError:
      type: object
      properties:
        monitorIdOrUrn:
          type: string
        _type:
          type: string
          enum:
            - InvalidMonitorIdentifierError
      required:
        - monitorIdOrUrn
        - _type
    MonitorNotFoundError:
      allOf:
        - $ref: "#/components/schemas/BaseMonitorError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - MonitorNotFoundError
      required:
        - _type
        - monitorId
        - monitorIdType

    MonitorInvalidIntervalError:
      type: object
      properties:
        intervalSeconds:
          type: integer
        _type:
          type: string
          enum:
            - MonitorInvalidIntervalError
      required:
        - intervalSeconds
        - _type

    MonitorApiError:
      allOf:
        - $ref: "#/components/schemas/BaseMonitorError"
        - type: object
          properties:
            statusCode:
              type: string
            message:
              type: string
          required:
            - statusCode
            - message

    MonitorErrors:
      type: array
      items:
        $ref: "#/components/schemas/MonitorError"
    MonitorError:
      type: object
      properties:
        error:
          type: string
        count:
          type: integer
        level:
          $ref: "generic_error_handling.xapi.yaml#/components/schemas/MessageLevel"
      required:
        - error
        - count
        - level
    MonitorRuntimeMetrics:
      type: object
      properties:
        healthStatesCount:
          type: integer
          description: "Representing the total count of the monitors results."
        unmappedHealthStatesCount:
          type: integer
          description: "Representing the total count of the monitors results that are not mapped to topology/"
        unknownCount:
          type: integer
          description: "Representing the count of the monitors results that are UNKNOWN and are mapped to topology."
        clearCount:
          type: integer
          description: "Representing the count of the monitors results that are CLEAR and are mapped to topology."
        deviatingCount:
          type: integer
          description: "Representing the count of the monitors results that are DEVIATING and are mapped to topology."
        criticalCount:
          type: integer
          description: "Representing the count of the monitors results that are CRITICAL and are mapped to topology."
        lastRunTimestamp:
          type: integer
          format: int64
          description: "Representing the epoch millis of the last monitor run."
        lastSuccessfulRunTimestamp:
          type: integer
          format: int64
          description: "Representing the epoch millis of the last monitor successful run."
        lastFailedRunTimestamp:
          type: integer
          format: int64
          description: "Representing the epoch millis of the last monitor failed run."

    MonitorMetrics:
      type: object
      properties:
        healthSyncServiceMetrics:
          $ref: "health_sync_service_api.yaml#/components/schemas/HealthStreamMetrics"
        runtimeMetrics:
          $ref: "#/components/schemas/MonitorRuntimeMetrics"
      required:
        - runtimeMetrics
