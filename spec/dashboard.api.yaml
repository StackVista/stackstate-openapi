openapi: 3.0.3
info:
  title: Dashboards API
  version: "1.0.0"
paths:
  /dashboards:
    get:
      tags:
        - dashboards
      summary: "Get list of dashboards"
      description: "Get a list of dashboards, optionally filtered by name."
      operationId: getDashboards
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
            description: "Filter dashboards by name."
        - name: includeDashboard
          in: query
          required: false
          schema:
            type: boolean
            default: false
            description: "If true, includes the full dashboard content. Defaults to false (only metadata is returned)."
      responses:
        "200":
          description: "A list of dashboards."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardReadSchema"
        "400":
          description: "Invalid query parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardInvalidQueryError"
        "401":
          description: "User is not authorized."
        "403":
          description: "User is forbidden for the provided permission."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    post:
      tags:
        - dashboards
      summary: "Create a new dashboard"
      description: "Save a new dashboard. The dashboard can be personal or global based on the scope parameter."
      operationId: saveDashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardWriteSchema"
      responses:
        "201":
          description: "Dashboard created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardReadFullSchema"
        "400":
          description: "Invalid dashboard data."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardCreateError"
        "401":
          description: "User is not authorized."
        "403":
          description: "User is forbidden for the provided permission."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
  /dashboards/{dashboardId}:
    get:
      tags:
        - dashboards
      summary: "Get a single dashboard"
      description: "Get a dashboard by its identifier."
      operationId: getDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdentifier"
        - name: includeDashboard
          in: query
          required: false
          schema:
            type: boolean
            default: false
            description: "If true, includes the full dashboard content. Defaults to false (only metadata is returned)."
      responses:
        "200":
          description: "A dashboard"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardReadSchema"
        "401":
          description: "User is not authorized."
        "403":
          description: "User is forbidden for the provided permission."
        "404":
          description: "Dashboard not found."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    put:
      tags:
        - dashboards
      summary: "Update a dashboard"
      description: "Update an existing dashboard by its identifier."
      operationId: updateDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardWriteSchema"
      responses:
        "200":
          description: "Dashboard updated."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardReadFullSchema"
        "400":
          description: "Invalid dashboard data."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardCreateError"
        "401":
          description: "User is not authorized."
        "403":
          description: "User is forbidden for the provided permission."
        "404":
          description: "Dashboard not found."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    delete:
      tags:
        - dashboards
      summary: "Delete a dashboard"
      description: "Delete a dashboard by its identifier. Only personal dashboards can be deleted. The dashboard will also be
      be removed from other users/groups starred dashboards."
      operationId: deleteDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdentifier"
      responses:
        "202":
          description: "Dashboard deletion request accepted."
        "401":
          description: "User is not authorized."
        "403":
          description: "User is forbidden for the provided permission."
        "404":
          description: "Dashboard not found."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"

  /dashboards/{dashboardId}/clone:
    post:
      tags:
        - dashboards
      summary: "Clone a dashboard"
      description: "Clone a dashboard with users or groups."
      operationId: cloneDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardCloneRequest"
      responses:
        "202":
          description: "Dashboard clone request accepted."
        "400":
          description: "Invalid clone request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardCloneError"
        "401":
          description: "User is not authorized."
        "403":
          description: "User is forbidden for the provided permission."
        "404":
          description: "Dashboard not found."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"

components:
  parameters:
    dashboardIdentifier:
      in: path
      name: dashboardId
      required: true
      schema:
        $ref: "#/components/schemas/DashboardId"
      description: "The identifier of a dashboard"

  schemas:
    DashboardId:
      type: string
      description: "The identifier of a dashboard"

    UserId:
      type: string
      description: "The identifier of a user"

    DashboardScope:
      type: string
      enum: [ globalDashboard, privateDashboard ]
      description: "Scope of the dashboard. 'globalDashboard' for accessible by everyone, 'privateDashboard' for owned and accessible by the current user."
      default: "privateDashboard"
    
    DashboardWriteSchema:
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/DashboardId"
        name:
          type: string
          description: "Name of the dashboard"
        description:
          type: string
          description: "Description of the dashboard"
        scope:
          $ref: "#/components/schemas/DashboardScope"
        dashboard:
          $ref: "common_perses.api.yaml#/components/schemas/Dashboard"
      required:
        - name
        - description
        - scope
        - dashboard

    DashboardReadSchema:
      discriminator:
        propertyName: _type
      oneOf:
        - $ref: "#/components/schemas/DashboardReadMetadataSchema"
        - $ref: "#/components/schemas/DashboardReadFullSchema"

    DashboardReadBaseSchema:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          description: "Name of the dashboard"
        description:
          type: string
          description: "Description of the dashboard"
        scope:
          $ref: "#/components/schemas/DashboardScope"
        ownerId:
          type: string
          description: "Identifier of the user who owns this dashboard."
          readOnly: true
        lastUpdateTimestamp:
          type: integer
          format: int64
      required:
        - id
        - name
        - description
        - scope
        - ownerId
        - lastUpdateTimestamp

    DashboardReadMetadataSchema:
      allOf:
        - $ref: "#/components/schemas/DashboardReadBaseSchema"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardReadMetadataSchema
          required:
            - _type

    DashboardReadFullSchema:
      allOf:
        - $ref: "#/components/schemas/DashboardReadBaseSchema"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardReadFullSchema
            dashboard:
              $ref: "common_perses.api.yaml#/components/schemas/Dashboard"
          required:
            - _type
            - dashboard

    DashboardCloneRequest:
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserId"
      required:
        - userId

    DashboardCreateError:
      type: object
      properties:
        _type:
          type: string
          enum:
            - DashboardCreateError
        errorMessage:
          type: string
          description: "A detailed error message describing why create operation failed."
      required:
        - _type
        - errorMessage

    DashboardInvalidQueryError:
      type: object
      properties:
        _type:
          type: string
          enum:
            - DashboardInvalidQueryError
        errorMessage:
          type: string
          description: "A detailed error message describing why the query was invalid."
      required:
        - _type
        - errorMessage

    DashboardCloneError:
      type: object
      properties:
        _type:
          type: string
          enum:
            - DashboardCloneError
        errorMessage:
          type: string
          description: "A detailed error message describing why the cloning operation failed."
      required:
        - _type
        - errorMessage
