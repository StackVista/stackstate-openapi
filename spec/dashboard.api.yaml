openapi: 3.0.3
info:
  title: Dashboards API
  version: "1.0.0"
  description: |
    This spec encapsulates the SUSE Observability Dashboard API.
paths:
  /dashboards:
    get:
      tags:
        - dashboards
      summary: "Get a list of dashboards"
      description: "Get a list of dashboards, optionally filtered by name."
      operationId: getDashboards
      parameters:
        - $ref: "#/components/parameters/filterByName"
        - $ref: "#/components/parameters/loadFullDashboard"
      responses:
        "200":
          $ref: "#/components/responses/dashboards"
        "400":
          $ref: "#/components/responses/dashboardClientErrors"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    post:
      tags:
        - dashboards
      summary: "Create a new dashboard"
      description: "Create a new dashboard. The dashboard can be private or global based on the scope parameter."
      operationId: createDashboard
      requestBody:
        $ref: "#/components/requestBodies/dashboardWriteRequest"
      responses:
        "201":
          $ref: "#/components/responses/dashboardSaved"
        "400":
          $ref: "#/components/responses/dashboardClientErrors"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
  /dashboards/{dashboardIdOrUrn}:
    get:
      tags:
        - dashboards
      summary: "Get a single dashboard"
      description: "Get a dashboard by its identifier."
      operationId: getDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdOrUrn"
        - $ref: "#/components/parameters/loadFullDashboard"
      responses:
        "200":
          $ref: "#/components/responses/dashboard"
        "400":
          $ref: "#/components/responses/dashboardClientErrors"
        "404":
          $ref: "#/components/responses/dashboardNotFoundError"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    put:
      tags:
        - dashboards
      summary: "Update a dashboard"
      description: "Update an existing dashboard by its identifier."
      operationId: updateDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdOrUrn"
      requestBody:
        $ref: "#/components/requestBodies/dashboardWriteRequest"
      responses:
        "200":
          $ref: "#/components/responses/dashboardSaved"
        "400":
          $ref: "#/components/responses/dashboardClientErrors"
        "404":
          $ref: "#/components/responses/dashboardNotFoundError"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    delete:
      tags:
        - dashboards
      summary: "Delete a dashboard"
      description: "Delete a dashboard by its identifier. Only private dashboards can be deleted."
      operationId: deleteDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdOrUrn"
      responses:
        "200":
          description: "Dashboard deleted."
        "400":
          $ref: "#/components/responses/dashboardClientErrors"
        "404":
          $ref: "#/components/responses/dashboardNotFoundError"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
  /dashboards/{dashboardIdOrUrn}/clone:
    post:
      tags:
        - dashboards
      summary: "Clone a dashboard"
      description: "Clone a dashboard for a user."
      operationId: cloneDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdOrUrn"
      requestBody:
        $ref: "#/components/requestBodies/dashboardCloneRequest"
      responses:
        "201":
          $ref: "#/components/responses/dashboardSaved"
        "400":
          $ref: "#/components/responses/dashboardClientErrors"
        "404":
          $ref: "#/components/responses/dashboardNotFoundError"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
components:
  parameters:
    dashboardIdOrUrn:
      in: path
      name: dashboardIdOrUrn
      required: true
      description: "The identifier of a dashboard"
      schema:
        $ref: "#/components/schemas/DashboardIdOrUrn"
    filterByName:
      in: query
      name: name
      required: false
      description: "Filter dashboards by name."
      schema:
        type: string
    loadFullDashboard:
      in: query
      name: loadFullDashboard
      required: false
      description: "If true, includes the full dashboard content. Defaults to false (only metadata is returned)."
      schema:
        type: boolean
        default: false
  requestBodies:
    dashboardWriteRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardWriteSchema"
    dashboardCloneRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardCloneRequest"
  responses:
    dashboards:
      description: "List of dashboards"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardList"
    dashboard:
      description: "A single dashboard"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardReadSchema"
    dashboardSaved:
      description: "Dashboard saved."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardReadSchema"
    dashboardInvalidQueryError:
      description: "Invalid query parameters."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardInvalidQueryError"
    dashboardInvalidIdentifierError:
      description: "Invalid dashboard identifier."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardInvalidIdentifierError"
    dashboardValidationError:
      description: "Invalid dashboard data."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardValidationError"
    dashboardCloneError:
      description: "Invalid clone request."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardCloneError"
    dashboardNotFoundError:
      description: "Dashboard not found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardNotFoundError"
    dashboardClientErrors:
      description: "Dashboard client errors."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardClientErrors"
  schemas:
    DashboardIdOrUrn:
      type: string
      pattern: ^urn:.+|[0-9]+$
      description: "The identifier of a dashboard. Either the system ID or URN for the resource."
    DashboardUrn:
      type: string
      description: "The URN of a dashboard"
    UserIdentifier:
      type: string
      description: "The identifier of a user"
    DashboardScope:
      type: string
      enum: [ globalDashboard, privateDashboard ]
      description: "Scope of the dashboard. 'globalDashboard' for accessible by everyone, 'privateDashboard' for owned and accessible by the current user."
    DashboardList:
      type: object
      properties:
        dashboards:
          type: array
          items:
            $ref: "#/components/schemas/DashboardReadSchema"
      required:
        - dashboards
    DashboardWriteSchema:
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/DashboardUrn"
        name:
          type: string
          description: "Name of the dashboard"
        description:
          type: string
          description: "Description of the dashboard"
        scope:
          $ref: "#/components/schemas/DashboardScope"
        ownerId:
          $ref: "#/components/schemas/UserIdentifier"
        dashboard:
          $ref: "common_perses.api.yaml#/components/schemas/PersesDashboard"
      required:
        - name
        - description
        - scope
        - dashboard
    DashboardReadSchema:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          description: "Name of the dashboard"
        description:
          type: string
          description: "Description of the dashboard"
        scope:
          $ref: "#/components/schemas/DashboardScope"
        ownerId:
          $ref: "#/components/schemas/UserIdentifier"
        dashboard:
          $ref: "common_perses.api.yaml#/components/schemas/PersesDashboard"
        lastUpdateTimestamp:
          type: integer
          format: int64
      required:
        - id
        - name
        - description
        - scope
        - lastUpdateTimestamp
    DashboardCloneRequest:
      type: object
      properties:
        userIdentifier:
          $ref: "#/components/schemas/UserIdentifier"
      required:
        - userIdentifier
    DashboardBaseError:
      type: object
      properties:
        _type:
          type: string
        message:
          type: string
          description: "A detailed error message describing why the operation failed."
      required:
        - _type
        - message
    DashboardValidationError:
      allOf:
        - $ref: "#/components/schemas/DashboardBaseError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardValidationError
    DashboardInvalidQueryError:
      allOf:
        - $ref: "#/components/schemas/DashboardBaseError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardInvalidQueryError
    DashboardInvalidIdentifierError:
      allOf:
        - $ref: "#/components/schemas/DashboardBaseError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardInvalidIdentifierError
            dashboardIdOrUrn:
              type: string
          required:
            - dashboardIdOrUrn
    DashboardCloneError:
      allOf:
        - $ref: "#/components/schemas/DashboardBaseError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardCloneError
    DashboardNotFoundError:
      allOf:
        - $ref: "#/components/schemas/DashboardBaseError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardNotFoundError
            dashboardIdOrUrn:
              type: string
          required:
            - dashboardIdOrUrn
    DashboardClientErrors:
      discriminator:
        propertyName: _type
      oneOf:
        - $ref: "#/components/schemas/DashboardInvalidIdentifierError"
        - $ref: "#/components/schemas/DashboardInvalidQueryError"
        - $ref: "#/components/schemas/DashboardValidationError"
        - $ref: "#/components/schemas/DashboardCloneError"
