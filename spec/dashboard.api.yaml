openapi: 3.0.3
info:
  title: Dashboards API
  version: "1.0.0"
  description: |
    This spec encapsulates the SUSE Observability Dashboard API.
paths:
  /dashboards:
    get:
      tags:
        - dashboards
      summary: "Get a list of dashboards"
      description: "Get a list of dashboards, optionally filtered by name."
      operationId: getDashboards
      parameters:
        - $ref: "#/components/parameters/filterByName"
        - $ref: "#/components/parameters/loadFullDashboard"
      responses:
        "200":
          $ref: "#/components/responses/dashboards"
        "400":
          $ref: "#/components/responses/dashboardInvalidQueryError"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    post:
      tags:
        - dashboards
      summary: "Create a new dashboard"
      description: "Create a new dashboard. The dashboard can be private or global based on the scope parameter."
      operationId: createDashboard
      requestBody:
        $ref: "#/components/requestBodies/dashboardWriteRequest"
      responses:
        "201":
          $ref: "#/components/responses/dashboardSaved"
        "400":
          $ref: "#/components/responses/dashboardValidationError"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
  /dashboards/{dashboardId}:
    get:
      tags:
        - dashboards
      summary: "Get a single dashboard"
      description: "Get a dashboard by its identifier."
      operationId: getDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdentifier"
        - $ref: "#/components/parameters/loadFullDashboard"
      responses:
        "200":
          $ref: "#/components/responses/dashboard"
        "404":
          description: "Dashboard not found."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    put:
      tags:
        - dashboards
      summary: "Update a dashboard"
      description: "Update an existing dashboard by its identifier."
      operationId: updateDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdentifier"
      requestBody:
        $ref: "#/components/requestBodies/dashboardWriteRequest"
      responses:
        "200":
          $ref: "#/components/responses/dashboardSaved"
        "400":
          $ref: "#/components/responses/dashboardValidationError"
        "404":
          description: "Dashboard not found."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
    delete:
      tags:
        - dashboards
      summary: "Delete a dashboard"
      description: "Delete a dashboard by its identifier. Only private dashboards can be deleted."
      operationId: deleteDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdentifier"
      responses:
        "200":
          description: "Dashboard deleted."
        "404":
          description: "Dashboard not found."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"

  /dashboards/{dashboardId}/clone:
    post:
      tags:
        - dashboards
      summary: "Clone a dashboard"
      description: "Clone a dashboard with users or groups."
      operationId: cloneDashboard
      parameters:
        - $ref: "#/components/parameters/dashboardIdentifier"
      requestBody:
        $ref: "#/components/requestBodies/dashboardCloneRequest"
      responses:
        "201":
          $ref: "#/components/responses/dashboardSaved"
        "400":
          $ref: "#/components/responses/dashboardCloneError"
        "404":
          description: "Dashboard not found."
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"

components:
  parameters:
    dashboardIdentifier:
      in: path
      name: dashboardId
      required: true
      description: "The identifier of a dashboard"
      schema:
        $ref: "#/components/schemas/DashboardId"

    filterByName:
      in: query
      name: name
      required: false
      description: "Filter dashboards by name."
      schema:
        type: string

    loadFullDashboard:
      in: query
      name: loadFullDashboard
      required: false
      description: "If true, includes the full dashboard content. Defaults to false (only metadata is returned)."
      schema:
        type: boolean
        default: false

  requestBodies:
    dashboardWriteRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardWriteSchema"

    dashboardCloneRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardCloneRequest"

  responses:
    dashboards:
      description: "List of dashboards"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardList"

    dashboard:
      description: "A single dashboard"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardReadSchema"

    dashboardSaved:
      description: "Dashboard saved."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardReadFullSchema"

    dashboardInvalidQueryError:
      description: "Invalid query parameters."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardInvalidQueryError"

    dashboardValidationError:
      description: "Invalid dashboard data."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardValidationError"

    dashboardCloneError:
      description: "Invalid clone request."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DashboardCloneError"

  schemas:
    DashboardId:
      type: string
      description: "The identifier of a dashboard"

    UserId:
      type: string
      description: "The identifier of a user"

    DashboardScope:
      type: string
      enum: [ globalDashboard, privateDashboard ]
      description: "Scope of the dashboard. 'globalDashboard' for accessible by everyone, 'privateDashboard' for owned and accessible by the current user."

    DashboardList:
      type: object
      properties:
        dashboards:
          type: array
          items:
            $ref: "#/components/schemas/DashboardReadSchema"
      required:
        - dashboards
    
    DashboardWriteSchema:
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/DashboardId"
        name:
          type: string
          description: "Name of the dashboard"
        description:
          type: string
          description: "Description of the dashboard"
        scope:
          $ref: "#/components/schemas/DashboardScope"
        dashboard:
          $ref: "common_perses.api.yaml#/components/schemas/PersesDashboard"
      required:
        - name
        - description
        - scope
        - dashboard

    DashboardReadSchema:
      discriminator:
        propertyName: _type
      oneOf:
        - $ref: "#/components/schemas/DashboardReadMetadataSchema"
        - $ref: "#/components/schemas/DashboardReadFullSchema"

    DashboardReadBaseSchema:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          description: "Name of the dashboard"
        description:
          type: string
          description: "Description of the dashboard"
        scope:
          $ref: "#/components/schemas/DashboardScope"
        ownerId:
          type: string
          description: "Identifier of the user who owns this dashboard."
          readOnly: true
        lastUpdateTimestamp:
          type: integer
          format: int64
      required:
        - id
        - name
        - description
        - scope
        - ownerId
        - lastUpdateTimestamp

    DashboardReadMetadataSchema:
      allOf:
        - $ref: "#/components/schemas/DashboardReadBaseSchema"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardReadMetadataSchema
          required:
            - _type

    DashboardReadFullSchema:
      allOf:
        - $ref: "#/components/schemas/DashboardReadBaseSchema"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardReadFullSchema
            dashboard:
              $ref: "common_perses.api.yaml#/components/schemas/PersesDashboard"
          required:
            - _type
            - dashboard

    DashboardCloneRequest:
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserId"
      required:
        - userId

    DashboardBaseError:
      type: object
      properties:
        errorMessage:
          type: string
          description: "A detailed error message describing why the operation failed."
      required:
        - errorMessage

    DashboardValidationError:
      allOf:
        - $ref: "#/components/schemas/DashboardBaseError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardValidationError
          required:
            - _type

    DashboardInvalidQueryError:
      allOf:
        - $ref: "#/components/schemas/DashboardBaseError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardInvalidQueryError
          required:
            - _type

    DashboardCloneError:
      allOf:
        - $ref: "#/components/schemas/DashboardBaseError"
        - type: object
          properties:
            _type:
              type: string
              enum:
                - DashboardCloneError
          required:
            - _type
