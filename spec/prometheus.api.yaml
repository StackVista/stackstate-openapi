openapi: 3.0.3
info:
  title: Stackstate prometheus Components
  version: "0.0.1"

components:
  schemas:
    PromQuery:
      type: string
    PromTime:
      type: string
      pattern: '(^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$)|(^[0-9]{10}$)'
    PromTimeout:
      type: string
      pattern: '^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$'
    PromStep:
      type: string
      pattern: '(^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$)|(^[0-9]+$)'
    PromQueryRequest:
      type: object
      properties:
        query:
          $ref: "#/components/schemas/PromQuery"
        time:
          $ref: "#/components/schemas/PromTime"
        timeout:
          $ref: "#/components/schemas/PromTimeout"
      required:
        - query
    PromQueryRangeRequest:
      type: object
      properties:
        query:
          $ref: "#/components/schemas/PromQuery"
        start:
          $ref: "#/components/schemas/PromTime"
        end:
          $ref: "#/components/schemas/PromTime"
        step:
          $ref: "#/components/schemas/PromStep"
        timeout:
          $ref: "#/components/schemas/PromTimeout"
      required:
        - query
        - start
        - end
        - step
    PromQueryExemplarRequest:
      type: object
      properties:
        query:
          $ref: "#/components/schemas/PromQuery"
        start:
          $ref: "#/components/schemas/PromTime"
        end:
          $ref: "#/components/schemas/PromTime"
      required:
        - query
        - start
        - end
    PromEnvelope:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: "#/components/schemas/PromData"
        errorType:
          type: string
        error:
          type: string
        warnings:
          type: array
          items:
            type: "string"
      required:
        - status
    PromExemplarEnvelope:
      type: object
      properties:
        status:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/PromExemplarData"
        errorType:
          type: string
        error:
          type: string
        warnings:
          type: array
          items:
            type: "string"
      required:
        - status
    PromData:
      type: object
      discriminator:
        propertyName: resultType
        mapping:
          matrix: "#/components/schemas/PromMatrix"
          vector: "#/components/schemas/PromVector"
          scalar: "#/components/schemas/PromScalar"
          string: "#/components/schemas/PromDataString"
      oneOf:
        - $ref: "#/components/schemas/PromMatrix"
        - $ref: "#/components/schemas/PromVector"
        - $ref: "#/components/schemas/PromScalar"
        - $ref: "#/components/schemas/PromDataString"
      required:
        - resultType
    PromScalar:
      type: object
      properties:
        resultType:
          type: string
          enum:
            - scalar
        result:
          $ref: "#/components/schemas/PromSample"
      required:
        - resultType
        - result
    PromDataString:
      type: object
      properties:
        resultType:
          type: string
          enum:
            - string
        result:
          $ref: "#/components/schemas/PromSample"
      required:
        - resultType
        - result
    PromVector:
      type: object
      properties:
        resultType:
          type: string
          enum:
            - vector
        result:
          type: array
          items:
            $ref: "#/components/schemas/PromVectorResult"
      required:
        - resultType
        - result
    PromMatrix:
      type: object
      properties:
        resultType:
          type: string
          enum:
            - matrix
        result:
          type: array
          items:
            $ref: "#/components/schemas/PromDataResult"
      required:
        - resultType
        - result
    PromDataResult:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/PromSample"
      required:
        - metric
        - values
    PromVectorResult:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        value:
          $ref: "#/components/schemas/PromSample"
      required:
        - metric
        - value
    PromSample:
      type: array
      items:
        oneOf:
          - type: number
            format: unix_timestamp
          - type: string
            format: sample_value
        description: Unix timestamp with sample value (as a string)
      x-as-tuple: true
      minItems: 2
      maxItems: 2
      description: |
        This is always a tuple represented as an array with in first position the unix timestamp as 
        a float with precision 3 in seconds) and in second position the sample value as a string.
    PromExemplarData:
      type: object
      properties:
        seriesLabels:
          type: object
          additionalProperties:
            type: string
        exemplars:
          type: array
          items:
            $ref: "#/components/schemas/PromExemplar"
      required:
        - seriesLabels
        - exemplars
    PromExemplar:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
        value:
          type: string
        timestamp:
          type: number
          format: float
      required:
        - labels
        - value
        - timestamp