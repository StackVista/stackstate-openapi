openapi: 3.0.3
info:
  description: StackState's API specification
  version: 0.0.1
  title: StackState API
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  contact:
    name: StackState
    email: info@stackstate.com
    url: "https://stackstate.com"
externalDocs:
  description: Documentation
  url: "https://docs.stackstate.com/"
paths:
  /import: { $ref: "import.xapi.yaml#/paths/%2Fimport" }
  /export: { $ref: "export.xapi.yaml#/paths/%2Fexport" }
  /node: { $ref: "node.xapi.yaml#/paths/%2Fnode" }
  /node/{nodeType}: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D" }
  /stackpack: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack" }
  /stackpack/{stackName}/provision: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackName%7D%2Fprovision" }
  /stackpack/{stackName}/deprovision/{stackId}: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackName%7D%2Fdeprovision%2F%7BstackId%7D" }
  /stackpack/{stackName}/upgrade: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackName%7D%2Fupgrade" }
  /stackpack/{stackpackName}/confirm-manual-steps/{stackpackInstanceId}: {$ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackpackName%7D%2Fconfirm-manual-steps%2F%7BstackpackInstanceId%7D"}
  /monitors: { $ref: "monitors.api.yaml#/paths/%2Fmonitors" }
  /monitors/{monitorIdOrUrn}: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D" }
  /monitors/{monitorIdOrUrn}/run: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Frun" }
  /monitors/{monitorIdOrUrn}/status: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Fstatus" }
  /user/profile: { $ref: "user_profile.api.yaml#/paths/%2Fuser%2Fprofile" }
  /user/profile/tokens: { $ref: "user_profile.api.yaml#/paths/%2Fuser%2Fprofile%2Ftokens" }
  /events: { $ref: "events.api.yaml#/paths/%2Fevents" }
  /events/{eventId}: { $ref: "events.api.yaml#/paths/%2Fevents%2F%7BeventId%7D" }
  /eventTypes: { $ref: "events.api.yaml#/paths/%2FeventTypes" }
  /eventSources: { $ref: "events.api.yaml#/paths/%2FeventSources" }
  /eventTags: { $ref: "events.api.yaml#/paths/%2FeventTags" }
  /synchronization/health/streams: { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams" }
  /synchronization/health/streams/{healthStreamUrn}/status:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fstatus" }
  /synchronization/health/streams/{healthStreamUrn}/clearErrors:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2FclearErrors" }
  /synchronization/health/streams/{healthStreamUrn}:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D" }
  /synchronization/health/streams/{healthStreamUrn}/substreams:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams" }
  /synchronization/health/streams/{healthStreamUrn}/topologyMatches:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2FtopologyMatches",
    }
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/status:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams%2F%7BhealthSyncSubStreamId%7D%2Fstatus",
    }
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/topologyMatches:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams%2F%7BhealthSyncSubStreamId%7D%2FtopologyMatches",
    }
  /synchronization/topology/streams: { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams" }
  /synchronization/topology/streams/sync:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2Fsync" }
  /synchronization/topology/streams/status:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2Fstatus" }
  /synchronization/topology/streams/clearErrors:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2FclearErrors" }
  /script/execute: { $ref: "script.api.yaml#/paths/%2Fscript%2Fexecute" }
  /server/info: { $ref: "server_info.api.yaml#/paths/%2Fserver%2Finfo" }
  /security/tokens: { $ref: "service_token.api.yaml#/paths/%2Fsecurity%2Ftokens" }
  /security/tokens/{serviceTokenId}: { $ref: "service_token.api.yaml#/paths/%2Fsecurity%2Ftokens%2F%7BserviceTokenId%7D" }
  /anomalies/export: { $ref: "anomalies.api.yaml#/paths/%2Fanomalies%2Fexport" }
security:
  - ApiToken: []
  - ServiceToken: []
components:
  securitySchemes:
    ApiToken:
      type: apiKey
      in: header
      name: X-API-Token
    ServiceToken:
      type: apiKey
      in: header
      name: X-API-Key
