openapi: 3.0.3
info:
  description: |
    This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState. 
    You can use the API for similar purposes.

    Each request sent to the StackState server API must be authenticated using one of the available authentication methods. 
    
    *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*

    For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).
  version: 5.2.0
  title: StackState API
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  contact:
    name: StackState
    email: info@stackstate.com
    url: "https://stackstate.com"
  x-logo:
    url: "https://raw.githubusercontent.com/StackVista/stackstate-docs/master/resources/logo/StackState-Color-padding.png"
    href: "#top"
paths:
  /import: { $ref: "import.xapi.yaml#/paths/%2Fimport" }
  /export: { $ref: "export.xapi.yaml#/paths/%2Fexport" }
  /node: { $ref: "node.xapi.yaml#/paths/%2Fnode" }
  /node/{nodeType}: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D" }
  /node/{nodeType}/{nodeId}: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D%2F%7BnodeId%7D" }
  /node/{nodeType}/{nodeIdOrUrn}/clone: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D%2F%7BnodeIdOrUrn%7D%2Fclone" }
  /node/{nodeType}/{nodeId}/islocked: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D%2F%7BnodeId%7D%2Fislocked" }
  /node/{nodeType}/{nodeId}/unlock: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D%2F%7BnodeId%7D%2Funlock" }
  /stackpack: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack" }
  /stackpack/{stackPackName}/provision: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackPackName%7D%2Fprovision" }
  /stackpack/{stackPackName}/deprovision/{stackPackInstanceId}: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackPackName%7D%2Fdeprovision%2F%7BstackPackInstanceId%7D" }
  /stackpack/{stackPackName}/upgrade: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackPackName%7D%2Fupgrade" }
  /stackpack/{stackPackName}/confirm-manual-steps/{stackPackInstanceId}: {$ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackPackName%7D%2Fconfirm-manual-steps%2F%7BstackPackInstanceId%7D"}
  /monitors: { $ref: "monitors.api.yaml#/paths/%2Fmonitors" }
  /monitors/{monitorIdOrUrn}: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D" }
  /monitors/{monitorIdOrUrn}/preview: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Fpreview" }
  /monitors/{monitorIdOrUrn}/preview/checkStates: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Fpreview%2FcheckStates" }
  /monitors/{monitorIdOrUrn}/run: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Frun" }
  /monitors/{monitorIdOrUrn}/status: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Fstatus" }
  /monitors/{monitorIdOrUrn}/checkStates: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2FcheckStates" }
  /monitors/{monitorIdOrUrn}/publish: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Fpublish" }
  /monitors/{monitorFunctionIdOrUrn}/test: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorFunctionIdOrUrn%7D%2Ftest" }
  /monitors/{monitorFunctionIdOrUrn}/test/checkStates: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorFunctionIdOrUrn%7D%2Ftest%2FcheckStates" }
  /monitors/identifierLookup: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2FidentifierLookup" }
  /monitors/overview: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2Foverview" }
  /monitor/checkStatus/{id}: { $ref: "monitors_check_status.api.yaml#/paths/%2Fmonitor%2FcheckStatus%2F%7Bid%7D" }
  /monitor/checkStatus/{id}/relatedFailures: { $ref: "monitors_check_status.api.yaml#/paths/%2Fmonitor%2FcheckStatus%2F%7Bid%7D%2FrelatedFailures" }
  /monitor/checkStatus/{id}/healthHistory: { $ref: "monitors_check_status.api.yaml#/paths/%2Fmonitor%2FcheckStatus%2F%7Bid%7D%2FhealthHistory" }
  /notifications/channels/slack/oauth-redirect: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fslack%2Foauth-redirect" }
  /notifications/channels/slack/oauth-callback: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fslack%2Foauth-callback" }
  /notifications/channels/slack/{channelId}: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fslack%2F%7BchannelId%7D" }
  /notifications/channels/slack/{channelId}/listSlackChannels: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fslack%2F%7BchannelId%7D%2FlistSlackChannels" }
  /notifications/channels/slack/{channelId}/joinSlackChannel: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fslack%2F%7BchannelId%7D%2FjoinSlackChannel" }
  /notifications/channels/slack/{channelId}/test: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fslack%2F%7BchannelId%7D%2Ftest" }
  /notifications/channels/webhook: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fwebhook" }
  /notifications/channels/webhook/{channelId}: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fwebhook%2F%7BchannelId%7D" }
  /notifications/channels/webhook/{channelId}/test: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fwebhook%2F%7BchannelId%7D%2Ftest" }
  /notifications/channels/opsgenie: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fopsgenie" }
  /notifications/channels/opsgenie/responders: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fopsgenie%2Fresponders" }
  /notifications/channels/opsgenie/{channelId}: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fopsgenie%2F%7BchannelId%7D" }
  /notifications/channels/opsgenie/{channelId}/test: { $ref: "notification_channels.api.yaml#/paths/%2Fnotifications%2Fchannels%2Fopsgenie%2F%7BchannelId%7D%2Ftest" }
  /notifications/configurations: { $ref: "notification_configurations.api.yaml#/paths/%2Fnotifications%2Fconfigurations" }
  /notifications/configurations/{notificationConfigurationIdOrUrn}: { $ref: "notification_configurations.api.yaml#/paths/%2Fnotifications%2Fconfigurations%2F%7BnotificationConfigurationIdOrUrn%7D" }
  /notifications/configurations/{notificationConfigurationIdOrUrn}/channels: { $ref: "notification_configurations.api.yaml#/paths/%2Fnotifications%2Fconfigurations%2F%7BnotificationConfigurationIdOrUrn%7D%2Fchannels" }
  /user/profile: { $ref: "user_profile.api.yaml#/paths/%2Fuser%2Fprofile" }
  /user/profile/tokens: { $ref: "user_profile.api.yaml#/paths/%2Fuser%2Fprofile%2Ftokens" }
  /user/session/assumedRole: { $ref: "user_session.api.yaml#/paths/%2Fuser%2Fsession%2FassumedRole" }
  /user/session/availableRoles: { $ref: "user_session.api.yaml#/paths/%2Fuser%2Fsession%2FavailableRoles" }
  /events: { $ref: "events.api.yaml#/paths/%2Fevents" }
  /events/{eventId}: { $ref: "events.api.yaml#/paths/%2Fevents%2F%7BeventId%7D" }
  /eventsHistogram: { $ref: "events.api.yaml#/paths/%2FeventsHistogram" }
  /eventTypes: { $ref: "events.api.yaml#/paths/%2FeventTypes" }
  /eventSources: { $ref: "events.api.yaml#/paths/%2FeventSources" }
  /eventTags: { $ref: "events.api.yaml#/paths/%2FeventTags" }
  /synchronization/health/streams: { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams" }
  /synchronization/health/streams/{healthStreamUrn}/status:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fstatus" }
  /synchronization/health/streams/{healthStreamUrn}/clearErrors:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2FclearErrors" }
  /synchronization/health/streams/{healthStreamUrn}:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D" }
  /synchronization/health/streams/{healthStreamUrn}/substreams:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams" }
  /synchronization/health/streams/{healthStreamUrn}/topologyMatches:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2FtopologyMatches",
    }
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/status:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams%2F%7BhealthSyncSubStreamId%7D%2Fstatus",
    }
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/topologyMatches:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams%2F%7BhealthSyncSubStreamId%7D%2FtopologyMatches",
    }
  /synchronization/topology/streams: { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams" }
  /synchronization/topology/streams/sync:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2Fsync" }
  /synchronization/topology/streams/status:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2Fstatus" }
  /synchronization/topology/streams/clearErrors:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2FclearErrors" }
  /script/execute: { $ref: "script.api.yaml#/paths/%2Fscript%2Fexecute" }
  /server/info: { $ref: "server_info.api.yaml#/paths/%2Fserver%2Finfo" }
  /security/tokens: { $ref: "service_token.api.yaml#/paths/%2Fsecurity%2Ftokens" }
  /security/tokens/{serviceTokenId}: { $ref: "service_token.api.yaml#/paths/%2Fsecurity%2Ftokens%2F%7BserviceTokenId%7D" }
  /security/ingestion/api_keys: { $ref: "ingestion_api_key.api.yaml#/paths/%2Fsecurity%2Fingestion%2Fapi%5Fkeys" }
  /security/ingestion/authorize: { $ref: "ingestion_api_key.api.yaml#/paths/%2Fsecurity%2Fingestion%2Fauthorize" }
  /security/ingestion/api_keys/{ingestionApiKeyId}: { $ref: "ingestion_api_key.api.yaml#/paths/%2Fsecurity%2Fingestion%2Fapi%5Fkeys%2F%7BingestionApiKeyId%7D" }
  /security/permissions/list: { $ref: "permissions.xapi.yaml#/paths/%2Fsecurity%2Fpermissions%2Flist" }
  /security/permissions/{subject}: { $ref: "permissions.xapi.yaml#/paths/%2Fsecurity%2Fpermissions%2F%7Bsubject%7D" }
  /security/subjects: { $ref: "subject.xapi.yaml#/paths/%2Fsecurity%2Fsubjects" }
  /security/subjects/{subject}: { $ref: "subject.xapi.yaml#/paths/%2Fsecurity%2Fsubjects%2F%7Bsubject%7D" }
  /subscription: { $ref: "subscription.xapi.yaml#/paths/%2Fsubscription" }
  /problems/{problemId}/causing-events: { $ref: "problems.api.yaml#/paths/%2Fproblems%2F%7BproblemId%7D%2Fcausing-events" }
  /metrics/query: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fquery" }
  /metrics/query_range: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fquery%5Frange" }
  /metrics/query_exemplars: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fquery%5Fexemplars" }
  /metrics/labels: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Flabels" }
  /metrics/label/{label}/values: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Flabel%2F%7Blabel%7D%2Fvalues" }
  /metrics/series: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fseries" }
  /metrics/metadata: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fmetadata" }
  /topic: { $ref: "topic.xapi.yaml#/paths/%2Ftopic" }
  /topic/{topic}: { $ref: "topic.xapi.yaml#/paths/%2Ftopic%2F%7Btopic%7D" }
  /k8s/logs: { $ref: "kubernetes_logs.api.yaml#/paths/%2Fk8s%2Flogs" }
  /k8s/logs/histogram: { $ref: "kubernetes_logs.api.yaml#/paths/%2Fk8s%2Flogs%2Fhistogram" }
  /k8s/logs/autocomplete: { $ref: "kubernetes_logs.api.yaml#/paths/%2Fk8s%2Flogs%2Fautocomplete" }
  /traces/spans: { $ref: "traces.api.yaml#/paths/%2Ftraces%2Fspans"}
  /traces/spans/duration/histogram: { $ref: "traces.api.yaml#/paths/%2Ftraces%2Fspans%2Fduration%2Fhistogram"}
  /traces/{traceId}: { $ref: "traces.api.yaml#/paths/%2Ftraces%2F%7BtraceId%7D"}
  /traces/{traceId}/spans/{spanId}: { $ref: "traces.api.yaml#/paths/%2Ftraces%2F%7BtraceId%7D%2Fspans%2F%7BspanId%7D"}
  /traces/spans/fields/attributes: { $ref: "traces.api.yaml#/paths/%2Ftraces%2Fspans%2Ffields%2Fattributes" }
  /traces/spans/fields/attributes/{attributeName}/values: { $ref: "traces.api.yaml#/paths/%2Ftraces%2Fspans%2Ffields%2Fattributes%2F%7BattributeName%7D%2Fvalues" }
  /traces/spans/fields/{field}/values: { $ref: "traces.api.yaml#/paths/%2Ftraces%2Fspans%2Ffields%2F%7Bfield%7D%2Fvalues" }
  /traces/components: { $ref: "traces.api.yaml#/paths/%2Ftraces%2Fcomponents" }
  /layouts: { $ref: "layouts.api.yaml#/paths/%2Flayouts" }
  /components/{componentIdOrUrn}/healthHistory: { $ref: "components.api.yaml#/paths/%2Fcomponents%2F%7BcomponentIdOrUrn%7D%2FhealthHistory" }
  # Dummy path to make sure that some types are included, which otherwise would be excluded
  /dummy/dummy: { $ref: "common.api.yaml#/paths/%2Fdummy%2Fdummy" }
security:
  - ApiToken: []
  - ServiceToken: []
  - ServiceBearer: []
components:
  securitySchemes:
    ApiToken:
      description: |
        Authenticate with your personal API token in the `X-API-Key` HTTP header.
        
        To get your API token:
         * Login to the StackState user-interface
         * In the main-menu click on the `CLI` option
         * Your API token is shown to you on this page.
      type: apiKey
      in: header
      name: X-API-Token
    ServiceToken:
      description: |
        For self-hosted installations only. Authenticate with a Kubernetes service token in the `X-API-Key` HTTP header. Also include the `X-API-ServiceBearer` header.
      type: apiKey
      in: header
      name: X-API-Key
    ServiceBearer:
      description: |
        Use in combination with a ServiceToken.
      type: apiKey
      in: header
      name: X-API-ServiceBearer
