openapi: 3.0.3
info:
  description: |
    This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState. 
    You can use the API for similar purposes.

    Each request sent to the StackState server API must be authenticated using one of the available authentication methods. 
    
    *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*

    For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).
  version: 5.2.0
  title: StackState API
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  contact:
    name: StackState
    email: info@stackstate.com
    url: "https://stackstate.com"
  x-logo:
    url: "https://raw.githubusercontent.com/StackVista/stackstate-docs/master/resources/logo/StackState-Color-padding.png"
    href: "#top"
paths:
  /import: { $ref: "import.xapi.yaml#/paths/%2Fimport" }
  /export: { $ref: "export.xapi.yaml#/paths/%2Fexport" }
  /node: { $ref: "node.xapi.yaml#/paths/%2Fnode" }
  /node/{nodeType}: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D" }
  /node/{nodeType}/{nodeId}: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D%2F%7BnodeId%7D" }
  /node/{nodeType}/{nodeId}/unlock: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D%2F%7BnodeId%7D%2Funlock" }
  /stackpack: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack" }
  /stackpack/{stackPackName}/provision: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackPackName%7D%2Fprovision" }
  /stackpack/{stackPackName}/deprovision/{stackPackInstanceId}: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackPackName%7D%2Fdeprovision%2F%7BstackPackInstanceId%7D" }
  /stackpack/{stackPackName}/upgrade: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackPackName%7D%2Fupgrade" }
  /stackpack/{stackPackName}/confirm-manual-steps/{stackPackInstanceId}: {$ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackPackName%7D%2Fconfirm-manual-steps%2F%7BstackPackInstanceId%7D"}
  /monitors: { $ref: "monitors.api.yaml#/paths/%2Fmonitors" }
  /monitors/{monitorIdOrUrn}: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D" }
  /monitors/{monitorIdOrUrn}/run: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Frun" }
  /monitors/{monitorIdOrUrn}/status: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2F%7BmonitorIdOrUrn%7D%2Fstatus" }
  /monitors/overview: { $ref: "monitors.api.yaml#/paths/%2Fmonitors%2Foverview" }
  /user/profile: { $ref: "user_profile.api.yaml#/paths/%2Fuser%2Fprofile" }
  /user/profile/tokens: { $ref: "user_profile.api.yaml#/paths/%2Fuser%2Fprofile%2Ftokens" }
  /user/session/assumedRole: { $ref: "user_session.api.yaml#/paths/%2Fuser%2Fsession%2FassumedRole" }
  /user/session/availableRoles: { $ref: "user_session.api.yaml#/paths/%2Fuser%2Fsession%2FavailableRoles" }
  /events: { $ref: "events.api.yaml#/paths/%2Fevents" }
  /events/{eventId}: { $ref: "events.api.yaml#/paths/%2Fevents%2F%7BeventId%7D" }
  /eventTypes: { $ref: "events.api.yaml#/paths/%2FeventTypes" }
  /eventSources: { $ref: "events.api.yaml#/paths/%2FeventSources" }
  /eventTags: { $ref: "events.api.yaml#/paths/%2FeventTags" }
  /synchronization/health/streams: { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams" }
  /synchronization/health/streams/{healthStreamUrn}/status:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fstatus" }
  /synchronization/health/streams/{healthStreamUrn}/clearErrors:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2FclearErrors" }
  /synchronization/health/streams/{healthStreamUrn}:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D" }
  /synchronization/health/streams/{healthStreamUrn}/substreams:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams" }
  /synchronization/health/streams/{healthStreamUrn}/topologyMatches:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2FtopologyMatches",
    }
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/status:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams%2F%7BhealthSyncSubStreamId%7D%2Fstatus",
    }
  /synchronization/health/streams/{healthStreamUrn}/substreams/{healthSyncSubStreamId}/topologyMatches:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams%2F%7BhealthStreamUrn%7D%2Fsubstreams%2F%7BhealthSyncSubStreamId%7D%2FtopologyMatches",
    }
  /synchronization/topology/streams: { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams" }
  /synchronization/topology/streams/sync:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2Fsync" }
  /synchronization/topology/streams/status:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2Fstatus" }
  /synchronization/topology/streams/clearErrors:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2FclearErrors" }
  /script/execute: { $ref: "script.api.yaml#/paths/%2Fscript%2Fexecute" }
  /server/info: { $ref: "server_info.api.yaml#/paths/%2Fserver%2Finfo" }
  /security/tokens: { $ref: "service_token.api.yaml#/paths/%2Fsecurity%2Ftokens" }
  /security/tokens/{serviceTokenId}: { $ref: "service_token.api.yaml#/paths/%2Fsecurity%2Ftokens%2F%7BserviceTokenId%7D" }
  /security/permissions/list: { $ref: "permissions.xapi.yaml#/paths/%2Fsecurity%2Fpermissions%2Flist" }
  /security/permissions/{subject}: { $ref: "permissions.xapi.yaml#/paths/%2Fsecurity%2Fpermissions%2F%7Bsubject%7D" }
  /security/subjects: { $ref: "subject.xapi.yaml#/paths/%2Fsecurity%2Fsubjects" }
  /security/subjects/{subject}: { $ref: "subject.xapi.yaml#/paths/%2Fsecurity%2Fsubjects%2F%7Bsubject%7D" }
  /subscription: { $ref: "subscription.xapi.yaml#/paths/%2Fsubscription" }
  /anomalies/export: { $ref: "anomalies.api.yaml#/paths/%2Fanomalies%2Fexport" }
  /components/{componentId}/streams: { $ref: "components.api.yaml#/paths/%2Fcomponents%2F%7BcomponentId%7D%2Fstreams" }
  /components/{componentId}/streams/{streamId}: { $ref: "components.api.yaml#/paths/%2Fcomponents%2F%7BcomponentId%7D%2Fstreams%2F%7BstreamId%7D" }
  /components/{componentId}/streams/latest: { $ref: 'components.api.yaml#/paths/%2Fcomponents%2F%7BcomponentId%7D%2Fstreams%2Flatest' }
  /components/{componentId}/checks: { $ref: "components.api.yaml#/paths/%2Fcomponents%2F%7BcomponentId%7D%2Fchecks" }
  /components/{componentId}/checks/{checkId}: { $ref: "components.api.yaml#/paths/%2Fcomponents%2F%7BcomponentId%7D%2Fchecks%2F%7BcheckId%7D" }
  /relations/{relationId}/streams: { $ref: "relations.api.yaml#/paths/%2Frelations%2F%7BrelationId%7D%2Fstreams" }
  /relations/{relationId}/streams/{streamId}: { $ref: "relations.api.yaml#/paths/%2Frelations%2F%7BrelationId%7D%2Fstreams%2F%7BstreamId%7D" }
  /relations/{relationId}/checks: { $ref: "relations.api.yaml#/paths/%2Frelations%2F%7BrelationId%7D%2Fchecks" }
  /relations/{relationId}/checks/{checkId}: { $ref: "relations.api.yaml#/paths/%2Frelations%2F%7BrelationId%7D%2Fchecks%2F%7BcheckId%7D" }
  /problems/{problemId}/causing-events: { $ref: "problems.api.yaml#/paths/%2Fproblems%2F%7BproblemId%7D%2Fcausing-events" }
  /metrics/query: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fquery" }
  /metrics/query_range: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fquery%5Frange" }
  /metrics/query_exemplars: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fquery%5Fexemplars" }
  /metrics/labels: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Flabels" }
  /metrics/label/{label}/values: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Flabel%2F%7Blabel%7D%2Fvalues" }
  /metrics/series: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fseries" }
  /metrics/metadata: { $ref: "metrics.api.yaml#/paths/%2Fmetrics%2Fmetadata" }
  /topic: { $ref: "topic.xapi.yaml#/paths/%2Ftopic" }
  /topic/{topic}: { $ref: "topic.xapi.yaml#/paths/%2Ftopic%2F%7Btopic%7D" }
  /k8s/logs: { $ref: "kubernetes_logs.api.yaml#/paths/%2Fk8s%2Flogs" }
  /k8s/logs/histogram: { $ref: "kubernetes_logs.api.yaml#/paths/%2Fk8s%2Flogs%2Fhistogram" }
  /k8s/logs/autocomplete: { $ref: "kubernetes_logs.api.yaml#/paths/%2Fk8s%2Flogs%2Fautocomplete" }
security:
  - ApiToken: []
  - ServiceToken: []
  - ServiceBearer: []
components:
  securitySchemes:
    ApiToken:
      description: |
        Authenticate with your personal API token in the `X-API-Key` HTTP header.
        
        To get your API token:
         * Login to the StackState user-interface
         * In the main-menu click on the `CLI` option
         * Your API token is shown to you on this page.
      type: apiKey
      in: header
      name: X-API-Token
    ServiceToken:
      description: |
        For self-hosted installations only. Authenticate with a Kubernetes service token in the `X-API-Key` HTTP header. Also include the `X-API-ServiceBearer` header.
      type: apiKey
      in: header
      name: X-API-Key
    ServiceBearer:
      description: |
        Use in combination with a ServiceToken.
      type: apiKey
      in: header
      name: X-API-ServiceBearer