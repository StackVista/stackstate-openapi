openapi: 3.0.3
info:
  description: StackState's API specification
  version: 0.0.1
  title: StackState API
  license:
    name: Proprietary
    url: "https://stackstate.com"
  contact:
    name: StackState
    email: info@stackstate.com
    url: "https://stackstate.com"
externalDocs:
  description: Documentation
  url: "https://docs.stackstate.com/"
paths:
  /import: { $ref: "import.xapi.yaml#/paths/%2Fimport" }
  /export: { $ref: "export.xapi.yaml#/paths/%2Fexport" }
  /node: { $ref: "node.xapi.yaml#/paths/%2Fnode" }
  /node/{nodeType}: { $ref: "node.xapi.yaml#/paths/%2Fnode%2F%7BnodeType%7D" }
  /stackpack: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack" }
  /stackpack/{stackName}/provision: { $ref: "stackpack.xapi.yaml#/paths/%2Fstackpack%2F%7BstackName%7D%2Fprovision" }
  /monitors: { $ref: "monitors.api.yaml#/paths/%2Fmonitors" }
  /monitor/{monitorId}: { $ref: "monitors.api.yaml#/paths/%2Fmonitor%2F%7BmonitorId%7D" }
  /monitor/{monitorId}/run: { $ref: "monitors.api.yaml#/paths/%2Fmonitor%2F%7BmonitorId%7D%2Frun" }
  /monitor/{monitorId}/status: { $ref: "monitors.api.yaml#/paths/%2Fmonitor%2F%7BmonitorId%7D%2Fstatus" }
  /monitor/{monitorId}/dryRun: { $ref: "monitors.api.yaml#/paths/%2Fmonitor%2F%7BmonitorId%7D%2FdryRun" }
  /monitorUrn/{monitorUrnId}: { $ref: "monitors_urn.api.yaml#/paths/%2FmonitorUrn%2F%7BmonitorUrnId%7D" }
  /monitorUrn/{monitorUrnId}/run: { $ref: "monitors_urn.api.yaml#/paths/%2FmonitorUrn%2F%7BmonitorUrnId%7D%2Frun" }
  /monitorUrn/{monitorUrnId}/status: { $ref: "monitors_urn.api.yaml#/paths/%2FmonitorUrn%2F%7BmonitorUrnId%7D%2Fstatus" }
  /monitorUrn/{monitorUrnId}/dryRun:
    { $ref: "monitors_urn.api.yaml#/paths/%2FmonitorUrn%2F%7BmonitorUrnId%7D%2FdryRun" }
  /user/profile: { $ref: "user_profile.api.yaml#/paths/%2Fuser%2Fprofile" }
  /user/profile/tokens: { $ref: "user_profile.api.yaml#/paths/%2Fuser%2Fprofile%2Ftokens" }
  /events: { $ref: "events.api.yaml#/paths/%2Fevents" }
  /events/{eventId}: { $ref: "events.api.yaml#/paths/%2Fevents%2F%7BeventId%7D" }
  /eventTypes: { $ref: "events.api.yaml#/paths/%2FeventTypes" }
  /eventSources: { $ref: "events.api.yaml#/paths/%2FeventSources" }
  /eventTags: { $ref: "events.api.yaml#/paths/%2FeventTags" }
  /synchronization/health/streams: { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstreams" }
  /synchronization/health/stream/{healthStreamUrn}/status:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstream%2F%7BhealthStreamUrn%7D%2Fstatus" }
  /synchronization/health/stream/{healthStreamUrn}/clearErrors:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstream%2F%7BhealthStreamUrn%7D%2FclearErrors" }
  /synchronization/health/stream/{healthStreamUrn}:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstream%2F%7BhealthStreamUrn%7D" }
  /synchronization/health/stream/{healthStreamUrn}/substreams:
    { $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstream%2F%7BhealthStreamUrn%7D%2Fsubstreams" }
  /synchronization/health/stream/{healthStreamUrn}/topologyMatches:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstream%2F%7BhealthStreamUrn%7D%2FtopologyMatches",
    }
  /synchronization/health/stream/{healthStreamUrn}/substream/{healthSyncSubStreamId}/status:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstream%2F%7BhealthStreamUrn%7D%2Fsubstream%2F%7BhealthSyncSubStreamId%7D%2Fstatus",
    }
  /synchronization/health/stream/{healthStreamUrn}/substream/{healthSyncSubStreamId}/topologyMatches:
    {
      $ref: "health_sync.api.yaml#/paths/%2Fsynchronization%2Fhealth%2Fstream%2F%7BhealthStreamUrn%7D%2Fsubstream%2F%7BhealthSyncSubStreamId%7D%2FtopologyMatches",
    }
  /synchronization/topology/streams: { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams" }
  /synchronization/topology/streams/sync:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2Fsync" }
  /synchronization/topology/streams/status:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2Fstatus" }
  /synchronization/topology/streams/clearErrors:
    { $ref: "topology_sync.api.yaml#/paths/%2Fsynchronization%2Ftopology%2Fstreams%2FclearErrors" }
  /script/execute: { $ref: "script.api.yaml#/paths/%2Fscript%2Fexecute" }
  /server/info: { $ref: "server_info.api.yaml#/paths/%2Fserver%2Finfo" }
  /security/token: { $ref: "service_token.api.yaml#/paths/%2Fsecurity%2Ftoken" }
  /security/token/{serviceTokenId}: { $ref: "service_token.api.yaml#/paths/%2Fsecurity%2Ftoken%2F%7BserviceTokenId%7D" }
  /anomaly-feedback: { $ref: "anomaly_feedback.api.yaml#/paths/%2Fanomaly-feedback" }
security:
  - ApiToken: []
components:
  securitySchemes:
    ApiToken:
      type: apiKey
      in: header
      name: X-API-Token
