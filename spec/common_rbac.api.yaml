paths:
  /stsAgent/rbac/instance:
    post:
      tags:
        - receiverRbacInstance
      summary: "Create instance RBAC objects"
      operationId: ingestInstanceRBAC
      description: "Ingest RBAC data snapshots to build a scoped authorization model for data access for the server API"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RBACRequest"
      responses:
        "201":
          description: "RBAC Data accepted"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
  /stsAgent/rbac/scope:
    post:
      tags:
        - receiverRbacScope
      summary: "Create scope RBAC objects"
      operationId: ingestScopeRBAC
      description: "Ingest RBAC data snapshots to build a scoped authorization model for data access for the server API"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RBACRequest"
      responses:
        "201":
          description: "RBAC Data accepted"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          $ref: "generic_error_handling.xapi.yaml#/components/responses/genericErrorsResponse"
components:
  schemas:
    RBACRequest:
      discriminator:
        propertyName: _type
      description: "RBACRequest holds the data needed to create or update RBAC objects"
      oneOf:
        - $ref: "#/components/schemas/RBACSnapshotRequest"
        - $ref: "#/components/schemas/RBACIncrementRequest"
      required:
        - _type
    RBACSnapshotRequest:
      type: object
      description: "RBACSnapshotRequest holds a complete or partial snapshot of RBAC data"
      properties:
        _type:
          type: string
          enum:
            - RBACSnapshotRequest  
        collection_timestamp:
          type: integer
          format: int64
          description: "Timestamp where the data was collected by the RBAC Agent"
        sequence:
          type: integer
          description: "Incremental number for snapshot batches. Helpful to detect incomplete snapshots that could lead to incorrect conclusions."
        cluster:
          type: string
          description: "Cluster name which identifies the scope of the RBAC data"
        start_snapshot:
          $ref: "#/components/schemas/StartSnapshot"
        stop_snapshot:
          $ref: "#/components/schemas/StopSnapshot"
        rbac_data:
          type: array
          items:
            $ref: "#/components/schemas/RbacData"
      required:
        - _type
        - collection_timestamp
        - sequence
        - cluster
        - rbac_data
    RBACIncrementRequest:
      type: object
      description: "CreateInstanceRBACRequest holds the a snapshot of data or individual updates or RBAC data"
      properties:
        _type:
          type: string
          enum:
            - RBACIncrementRequest 
        collection_timestamp:
          type: integer
          format: int64
          description: "Timestamp where the data was collected by the RBAC Agent"
        cluster:
          type: string
          description: "Cluster name which identifies the scope of the RBAC data"
        changes:
          type: array
          items:
            $ref: "#/components/schemas/RbacDataChanges"
      required:
        - _type
        - collection_timestamp
        - cluster
        - changes

    StartSnapshot:
      type: object
      description: "Object that signals that the RBAC data belongs to a new Snapshot"
      properties:
        repeat_interval_s:
          type: integer
          format: int64
          description: "Number of seconds when the RBAC Agent will send the following snapshot. Heartbeat of the Agent"

    StopSnapshot:
      type: object
      description: "Object that signals that an open Snapshot needs to be closed after ingesting the RBAC data"

    RbacData:
      discriminator:
        propertyName: kind
      oneOf:
        - $ref: "#/components/schemas/ClusterRole"
        - $ref: "#/components/schemas/Role"
        - $ref: "#/components/schemas/ClusterRoleBinding"
        - $ref: "#/components/schemas/RoleBinding"
      required:
        - kind
    RbacDataChanges:
      discriminator:
        propertyName: _type
      oneOf:
        - $ref: "#/components/schemas/CreateRbacData"
        - $ref: "#/components/schemas/UpdateRbacData"
        - $ref: "#/components/schemas/DeleteRbacData"
      required:
        - _type
    CreateRbacData:
      type: object
      description: "Defines a RBAC resource that needs to be created"
      properties:
        _type:
          type: string
          enum:
            - CreateRbacData
        resource:
          $ref: "#/components/schemas/RbacData"
      required:
        - _type
        - resource
    UpdateRbacData:
      type: object
      description: "Defines a RBAC resource that needs to be updated"
      properties:
        _type:
          type: string
          enum:
            - UpdateRbacData
        resource:
          $ref: "#/components/schemas/RbacData"
      required:
        - _type
        - resource
    DeleteRbacData:
      type: object
      description: "Defines a RBAC resource that needs to be delete"
      properties:
        _type:
          type: string
          enum:
            - DeleteRbacData
        uid:
          description: "UID of the referent."
          type: string
      required:
        - _type
        - uid
    PolicyRule:
      type: object
      description: "PolicyRule holds information that describes a policy rule."
      properties:
        apiGroups:
          type: array
          description: "APIGroups is the name of the APIGroup that contains the resources."
          items:
            type: string
        nonResourceURLs:
          type: array
          description: "NonResourceURLs is a set of partial URLs that a user should have access to."
          items:
            type: string
        resourceNames:
          type: array
          description: "ResourceNames is an optional white list of names that the rule applies to."
          items:
            type: string
        resources:
          type: array
          description: "Resources is a list of resources this rule applies to."
          items:
            type: string
        verbs:
          type: array
          description: "Verbs is a list of Verbs that apply to all ResourceKinds contained in this rule."
          items:
            type: string
      required:
        - verbs
    Subject:
      type: object
      description: "Subject contains a reference to the object or user identities a role binding applies to."
      properties:
        apiGroup:
          type: string
          description: "APIGroup holds the API group of the referenced subject."
        kind:
          type: string
          description: "Kind of object being referenced."
        name:
          type: string
          description: "Name of the object being referenced."
        namespace:
          type: string
          description: "Namespace of the referenced object."
      required:
        - kind
        - name
    RoleRef:
      description: "RoleRef contains information that points to the role being used"
      type: object
      properties:
        apiGroup:
          description: "APIGroup is the group for the resource being referenced"
          type: string
        kind:
          description: "Kind is the type of resource being referenced"
          type: string
        name:
          description: "Name is the name of resource being referenced"
          type: string
      required:
        - apiGroup
        - kind
        - name
    LabelSelector:
      description: "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects."
      type: object
      properties:
        matchExpressions:
          description: "matchExpressions is a list of label selector requirements. The requirements are ANDed."
          type: array
          items:
            $ref: "#/components/schemas/LabelSelectorRequirement"
        matchLabels:
          description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. The requirements are ANDed."
          type: object
          additionalProperties:
            type: string
    LabelSelectorRequirement:
      description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
      type: object
      properties:
        key:
          description: "key is the label key that the selector applies to."
          type: string
        operator:
          description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
          type: string
        values:
          description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
          type: array
          items:
            type: string
      required:
        - key
        - operator
    OwnerReference:
      description: "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field."
      type: object
      properties:
        uid:
          description: "UID of the referent."
          type: string
        name:
          description: "Name of the referent."
          type: string
        kind:
          description: "Kind of the referent."
          type: string
        blockOwnerDeletion:
          description: "If true, AND if the owner has the 'foregroundDeletion' finalizer, then the owner cannot be deleted from the key-value store until this reference is removed."
          type: boolean
        controller:
          description: "If true, this reference points to the managing controller."
          type: boolean
      required:
        - name
        - uid
        - kind
    Time:
      description: "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON."
      type: string
      format: date-time
    ManagedFieldsEntry:
      description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
      type: object
      properties:
        apiVersion:
          description: "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
          type: string
        fieldsType:
          description: "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
          type: string
        manager:
          description: "Manager is an identifier of the workflow managing these fields."
          type: string
        operation:
          description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
          type: string
        subresource:
          description: "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
          type: string
        time:
          $ref: "#/components/schemas/Time"
          description: "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
    ObjectMeta:
      type: object
      description: "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
      properties:
        uid:
          type: string
          description: "Unique identifier for this object. Populated by the system."
        name:
          type: string
          description: "Unique name within a namespace. Required for resource creation."
        annotations:
          type: object
          additionalProperties:
            type: string
          description: "Annotations is an unstructured key-value map stored with a resource that may be set by external tools. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations"
        creationTimestamp:
          $ref: "#/components/schemas/Time"
        deletionGracePeriodSeconds:
          type: integer
          format: int64
          description: "Number of seconds allowed for this object to gracefully terminate before removal."
        deletionTimestamp:
          $ref: "#/components/schemas/Time"
        finalizers:
          type: array
          items:
            type: string
          description: "Must be empty before deletion."
        generateName:
          type: string
          description: "Optional prefix for generating a unique name."
        generation:
          type: integer
          format: int64
          description: "A sequence number representing a specific generation of the desired state."
        labels:
          type: object
          additionalProperties:
            type: string
          description: "Map of string keys and values used to organize and categorize objects."
        managedFields:
          type: array
          items:
            $ref: "#/components/schemas/ManagedFieldsEntry"
          description: "Maps workflow-id and version to the set of fields managed by that workflow."
        namespace:
          type: string
          description: "Defines the space within which each name must be unique."
        ownerReferences:
          type: array
          items:
            $ref: "#/components/schemas/OwnerReference"
          description: "List of objects depended by this object."
        resourceVersion:
          type: string
          description: "Opaque value representing the internal version of this object."
      required:
        - uid
        - name
    AggregationRule:
      description: "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole."
      type: object
      properties:
        clusterRoleSelectors:
          description: "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added."
          type: array
          items:
            $ref: "#/components/schemas/LabelSelector"
    ClusterRole:
      description: "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding."
      type: object
      properties:
        kind:
          description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated."
          type: string
        metadata:
          $ref: "#/components/schemas/ObjectMeta"
          description: "Standard object's metadata."
        aggregationRule:
          $ref: "#/components/schemas/AggregationRule"
          description: "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller-managed and direct changes to Rules will be overwritten by the controller."
        rules:
          description: "Rules holds all the PolicyRules for this ClusterRole."
          type: array
          items:
            $ref: "#/components/schemas/PolicyRule"
      required:
        - kind
        - metadata
    ClusterRoleBinding:
      description: "ClusterRoleBinding references a ClusterRole but does not contain it. It can reference a ClusterRole in the global namespace and adds subject information via the Subject field."
      type: object
      properties:
        kind:
          description: "Kind is a string value representing the REST resource this object represents."
          type: string
        metadata:
          $ref: "#/components/schemas/ObjectMeta"
          description: "Standard object's metadata."
        roleRef:
          $ref: "#/components/schemas/RoleRef"
          description: "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable."
        subjects:
          description: "Subjects holds references to the objects the role applies to."
          type: array
          items:
            $ref: "#/components/schemas/Subject"
      required:
        - kind
        - metadata
        - roleRef
    Role:
      description: "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding."
      type: object
      properties:
        kind:
          description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated."
          type: string
        metadata:
          $ref: "#/components/schemas/ObjectMeta"
          description: "Standard object's metadata."
        rules:
          description: "Rules holds all the PolicyRules for this Role."
          type: array
          items:
            $ref: "#/components/schemas/PolicyRule"
      required:
        - kind
        - metadata
    RoleBinding:
      description: "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in."
      type: object
      properties:
        kind:
          description: "Kind is a string value representing the REST resource this object represents."
          type: string
        metadata:
          $ref: "#/components/schemas/ObjectMeta"
          description: "Standard object's metadata."
        roleRef:
          $ref: "#/components/schemas/RoleRef"
          description: "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. This field is immutable."
        subjects:
          description: "Subjects holds references to the objects the role applies to."
          type: array
          items:
            $ref: "#/components/schemas/Subject"
      required:
        - kind
        - metadata
        - roleRef
