paths:
  /dummy/dummy:
    get:
      tags:
        - dummy
      #  Its not possible to make a ref unfortunately (https://github.com/OpenAPITools/openapi-generator/issues/11151)
      summary: "Dummy path to fix omission in openapi generation when a type is not included."
      operationId: dummy
      description: ""
      responses:
        "400":
          $ref: "#/components/responses/stackElementNotFound"
components:
  responses:
    genericServerError:
      description: "Error when handling the request on the server side."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericServerError"
    stackElementNotFound:
      description: "Error when handling an element which cannot be found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StackElementNotFound"
  schemas:
    StackElementNotFound:
      type: object
      discriminator:
        propertyName: _type
      properties:
        _type:
          type: string
          enum:
            - StackElementNotFound
        objectType:
          type: string
        objectId:
          type: string
        message:
          type: string
        existedEarlierMs:
          type: integer
          format: int64
        existsLaterMs:
          type: integer
          format: int64
      required:
        - _type
        - objectType
        - objectId
        - message
    GenericServerError:
      discriminator:
        propertyName: _type
      oneOf:
        - $ref: "#/components/schemas/InternalServerError"
      required:
        - _type
    InternalServerError:
      type: object
      properties:
        _type:
          type: string
          enum:
            - InternalServerError
      required:
        - _type
    HealthStateValue:
      enum:
        - UNINITIALIZED
        - UNKNOWN
        - CLEAR
        - DISABLED
        - DEVIATING
        - FLAPPING
        - CRITICAL
      type: string
    MonitorReferenceId:
      type: object
      discriminator:
        propertyName: _type
      oneOf:
        - $ref: "#/components/schemas/MonitorDefId"
        - $ref: "#/components/schemas/ExternalMonitorDefId"
    ExternalMonitorDefId:
      type: object
      properties:
        _type:
          enum:
            - ExternalMonitorDefId
        id:
          type: integer
          format: int64
      required:
        - _type
        - id
    MonitorDefId:
      type: object
      properties:
        _type:
          enum:
            - MonitorDefId
        id:
          type: integer
          format: int64
      required:
        - _type
        - id
    Instant:
      description: Date/time representation in milliseconds since epoch (1970-01-01 00:00:00)
      type: integer
      format: instant
    InstantNanoPrecision:
      type: object
      description: A custom representation for a date/time that needs better than milliseconds precision. Simply using nanoseconds since epoch results in integers that are too big to be represented correctly in Javascript (which is limited to 2^53-1). Instead this uses the standard representation of milliseconds since epoch with a nanosecond offset. Calculate nanoseconds since epoch like this `nanosSinceEpoch = timestamp * 1000000 + offsetNanos`.
      properties:
        timestamp: 
          description: Default timestamp representation in milliseconds since epoch
          $ref: "#/components/schemas/Instant"
        offsetNanos:
          description: Offset in nanoseconds (relative to the timestamp). Especially useful when comparing start and/or end times of spans, for example when rendering a trace chart.
          type: integer
          format: int32
          minimum: 0
          maximum: 999999
      required:
        - timestamp
        - offsetNanos
